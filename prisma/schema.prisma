// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  image             String?
  email             String?       @unique
  emailVerified     DateTime?
  hashedPassword    String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  favoriteIds       String[]      @db.ObjectId
  photoProfile      String?
  userName          String?
  role              String        @default("user")
  sessions          Session[]
  accounts          Account[]
  myList            MyListUsers[] 
  Comments          Comments[]
}

model Account {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?       @db.String
  access_token      String?       @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?       @db.String
  session_state     String? 

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken      String        @unique
  userId            String        @db.ObjectId
  expires           DateTime

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  identifier        String
  token             String        @unique
  expires           DateTime

  @@unique([identifier, token])
}

model Movies {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  videoUrl          String
  poster            String
  genres            String[]
  cast              String[]
  producers         String[]
  directors         String[]
  duration          String
  year              String
  imdbRating        Float
  imdbUsersRating   Float
  votes             Json?         @default("[]")
  Comments          Comments[]
}

model Categories {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  myListUserId      String        @db.ObjectId
  name              String
  color             String
  movieIds          String[]      @db.ObjectId

  myListUser MyListUsers @relation(fields: [myListUserId], references: [id], onDelete: Cascade)
}

model MyListUsers {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  favoritesAux      String[]      @db.ObjectId
  categories        Categories[]
  
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comments {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  movieId           String        @db.ObjectId
  userName          String
  comment           String
  createdAt         DateTime      @default(now())

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movies @relation(fields: [movieId], references: [id], onDelete: Cascade)
}
